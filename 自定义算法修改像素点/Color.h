//
//  Color.h
//  自定义算法修改像素点
//
//  Created by lalala on 2017/5/17.
//  Copyright © 2017年 lsh. All rights reserved.
//

#ifndef Color_h
#define Color_h

//分析红色的取值原理
#define Mask8(x) ( (x) & 0xFF)
#define R(x) ( Mask8(x) )
//第一步： 获取color的值
//color = 4279833888 ---> 二级制 ---> 11111111 00011001 00010101 00100000
//& .逻辑运算符 （同为1 结果为1 否则为0）
//0xFF （十六进制） ---> 二进制 ---> 11111111
//第二步： 计算R值
//color = 11111111 00011001 00010101 00100000
//
//0xFF  = 00000000 00000000 00000000 11111111
//R     = 00000000 00000000 00000000 00100000 = 2 * 2 * 2 * 2 * 2 = 32 
#define G(x) ( Mask8(x >> 8) )
//分析绿色取值原理
//第一步： 位运算（>> 向右移动 x >> 8 表示向右移动8位）
//color = 11111111 00011001 00010101 00100000
//             color >> 8
//color = 11111111 00011001 00010101
//第二步：进行路咯及运算符&
//
//0xFF = 00000000 00000000 11111111
//G    = 00000000 00000000 00010101 = 16 + 4 + 1 = 21
#define B(x) ( Mask8(x >> 16) )
//分析蓝色取值原理
//第一步： 位运算（>> 向右移动 x >> 16 表示向右移动8位）
//color = 11111111 00011001 00010101 00100000
//             color >> 16
//color = 11111111 00011001
//第二步：进行路咯及运算符&
//
//0xFF = 00000000  11111111
//B    = 00000000  00011001 = 16 + 8 + 1 = 25
#define A(x) ( Mask8(x >> 24) )
//分析蓝透明度取值原理
//第一步： 位运算（>> 向右移动 x >> 24 表示向右移动8位）
//color = 11111111 00011001 00010101 00100000
//             color >> 24
//color = 11111111
//第二步：进行路咯及运算符&
//
//0xFF = 11111111
//A    = 11111111 = 255
#define RGBAMake(r,g,b,a) ( Mask8(r) | Mask8(g) << 8 | Mask8(b) << 16 | Mask8(a) << 24 )

#endif /* Color_h */
